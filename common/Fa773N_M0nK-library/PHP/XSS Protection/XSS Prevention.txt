Source	:	https://www.owasp.org/index.php/Abridged_XSS_Prevention_Cheat_Sheet
	21-04-2013

----------------------------------------------------------------------------------------------------
0.
Where not to put untrusted data: -

	<script>...NEVER PUT UNTRUSTED DATA HERE...</script>	directly in a script

	<!--...NEVER PUT UNTRUSTED DATA HERE...-->						inside an HTML comment

	<div ...NEVER PUT UNTRUSTED DATA HERE...=test />			in an attribute name

	<NEVER PUT UNTRUSTED DATA HERE... href="/test" />			in a tag name

	<style>...NEVER PUT UNTRUSTED DATA HERE...</style>		directly in CSS

----------------------------------------------------------------------------------------------------

1.
_HTML_ Escape Before Inserting Untrusted Data into HTML Element Content

	<body>...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...</body>

	<div>...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...</div>

	any other normal HTML elements

Implementation: -

	& --> &amp;
	< --> &lt;
	> --> &gt;
	" --> &quot;
	' --> &#x27;
	/ --> &#x2F;

ESAPI: -

	String safe = ESAPI.encoder().encodeForHTML( request.getParameter( "input" ) );
		
----------------------------------------------------------------------------------------------------

2.
_Attribute_ Escape Before Inserting Untrusted Data into HTML Common Attributes

*This should not be used for complex attributes like href, src, style, or any of the event handlers like onmouseover.*

*Except for alphanumeric characters, escape all characters with ASCII values less than 256 with the &#xHH; format (or a named entity if available) to prevent switching out of the attribute.*

	<div attr=...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...>content</div>			inside UNquoted attribute

	<div attr='...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...'>content</div>		inside single quoted attribute

	<div attr="...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...">content</div>		inside double quoted attribute

Implementation: -
	Except for alphanumeric characters, escape all characters with ASCII values less than 256 with the &#xHH; format (or a named entity if available) to prevent switching out of the attribute.

ESAPI: -

 String safe = ESAPI.encoder().encodeForHTMLAttribute( request.getParameter( "input" ) );
		
----------------------------------------------------------------------------------------------------

3.
_JavaScript_ Escape Before Inserting Untrusted Data into JavaScript Data Values

	<script>alert('...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...')</script>			inside a quoted string

	<script>x='...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...'</script>					one side of a quoted expression

	<div onmouseover="x='...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...'"</div>	inside quoted event handler

*Please note there are some JavaScript functions that can never safely use untrusted data as input - EVEN IF JAVASCRIPT ESCAPED!*
		<script>
		window.setInterval('...EVEN IF YOU ESCAPE UNTRUSTED DATA YOU ARE XSSED HERE...');
		</script>

Implementation: -
	Except for alphanumeric characters, escape all characters less than 256 with the \xHH format to prevent switching out of the data value into the script context or into another attribute.
		DO NOT use any escaping shortcuts like \" because the quote character may be matched by the HTML attribute parser which runs first.
			These escaping shortcuts are also susceptible to "escape-the-escape" attacks where the attacker sends \" and the vulnerable code turns that into \\" which enables the quote. 

ESAPI: -
	String safe = ESAPI.encoder().encodeForJavaScript( request.getParameter( "input" ) );
	
-------------------------

	3.1
	HTML escape JSON values in an HTML context and read the data with JSON.parse 
	
		< I did not understand this. To be understood when using JSON >

-------------------------
		
----------------------------------------------------------------------------------------------------

4.
_CSS_ Escape And Strictly Validate Before Inserting Untrusted Data into HTML _Style_ Property Values

*
It's important that you only use untrusted data in a property value and not into other places in style data.
You should stay away from putting untrusted data into complex properties like url, behavior, and custom (-moz-binding).
You should also not put untrusted data into IEâ€™s expression property value which allows JavaScript. 
*

*
Please note there are some CSS contexts that can never safely use untrusted data as input - EVEN IF PROPERLY CSS ESCAPED!
You will have to ensure that URLs only start with "http" not "javascript" and that properties never start with "expression".
*

	<style>selector { property : ...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...; } </style>			property value

	<style>selector { property : "...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE..."; } </style>		property value

	<span style="property : ...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...">text</style>					property value

Implementation: -
	Except for alphanumeric characters, escape all characters with ASCII values less than 256 with the \HH escaping format.
		DO NOT use any escaping shortcuts like \" because the quote character may be matched by the HTML attribute parser which runs first.
			These escaping shortcuts are also susceptible to "escape-the-escape" attacks where the attacker sends \" and the vulnerable code turns that into \\" which enables the quote.

ESAPI: -
	String safe = ESAPI.encoder().encodeForCSS( request.getParameter( "input" ) );

----------------------------------------------------------------------------------------------------

5.
_URL_ Escape Before Inserting Untrusted Data into HTML URL Parameter Values 

	<a href="http://www.somesite.com?test=...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...">link</a >

Implementation: -
	Except for alphanumeric characters, escape all characters with ASCII values less than 256 with the %HH escaping format.

ESAPI: -
	String safe = ESAPI.encoder().encodeForURL( request.getParameter( "input" ) );

----------------------------------------------------------------------------------------------------

6.
Use an HTML Policy engine to validate or clean user-driven HTML in an outbound way

	< I did not understand this. >

----------------------------------------------------------------------------------------------------

7.
Prevent DOM-based XSS

	< I did not understand this. >

----------------------------------------------------------------------------------------------------

Bonus Rule.
Use HTTPOnly cookie flag 
